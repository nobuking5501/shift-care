#!/usr/bin/env python3
"""
ClaudeHelper Session Save Script
障害者施設向けシフト管理アプリ開発専用版

Usage:
    python save_session.py --session-name "機能名_作業内容" --tags "frontend,api,database" --summary "作業要約"
    python save_session.py --checkpoint  # 中間保存
    python save_session.py --finalize   # 最終保存＆バックアップ
"""

import os
import json
import argparse
from datetime import datetime, timedelta
import hashlib
import time

class SessionSaver:
    def __init__(self):
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.sessions_dir = os.path.join(self.base_dir, "sessions")
        self.metadata_dir = os.path.join(self.sessions_dir, "metadata")
        self.checkpoint_dir = os.path.join(self.base_dir, "checkpoints_backup")
        self.session_tracker_file = os.path.join(self.base_dir, ".session_tracker.json")
        
        # ディレクトリ作成
        os.makedirs(self.sessions_dir, exist_ok=True)
        os.makedirs(self.metadata_dir, exist_ok=True)
        os.makedirs(self.checkpoint_dir, exist_ok=True)
        
        # セッション追跡初期化
        self.init_session_tracker()

    def generate_session_id(self, session_name):
        """セッションIDを生成"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        hash_suffix = hashlib.md5(session_name.encode()).hexdigest()[:8]
        return f"{timestamp}_{hash_suffix}"

    def save_session(self, session_name, tags=None, summary="", content="", is_checkpoint=False, is_finalize=False):
        """セッション保存"""
        session_id = self.generate_session_id(session_name)
        timestamp = datetime.now()
        
        # セッションファイル名
        session_filename = f"{timestamp.strftime('%Y%m%d')}_{session_name.replace(' ', '_')}.md"
        session_path = os.path.join(self.sessions_dir, session_filename)
        
        # メタデータ
        metadata = {
            "session_id": session_id,
            "session_name": session_name,
            "timestamp": timestamp.isoformat(),
            "tags": tags.split(",") if tags else [],
            "summary": summary,
            "type": "checkpoint" if is_checkpoint else "finalize" if is_finalize else "regular",
            "file_path": session_path,
            "project": "shift-care-app",
            "status": "completed" if is_finalize else "in_progress"
        }
        
        # セッション内容作成
        session_content = self._create_session_content(metadata, content)
        
        # ファイル保存
        with open(session_path, "w", encoding="utf-8") as f:
            f.write(session_content)
        
        # メタデータ保存
        metadata_path = os.path.join(self.metadata_dir, f"{session_id}.json")
        with open(metadata_path, "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        # チェックポイント/最終保存の場合バックアップ作成
        if is_checkpoint or is_finalize:
            self._create_backup(session_path, session_id, is_finalize)
        
        print(f"✅ セッション保存完了: {session_filename}")
        print(f"📍 Session ID: {session_id}")
        if tags:
            print(f"🏷️  Tags: {tags}")
        print(f"📝 Summary: {summary}")
        
        return session_id, session_path

    def _create_session_content(self, metadata, content):
        """セッション内容のMarkdown生成"""
        template = f"""# {metadata['session_name']}

## セッション情報
- **Session ID**: {metadata['session_id']}
- **作成日時**: {metadata['timestamp']}
- **タグ**: {', '.join(metadata['tags'])}
- **ステータス**: {metadata['status']}
- **種別**: {metadata['type']}

## 要約
{metadata['summary']}

## 作業内容
{content if content else "※ここに作業内容を記載してください"}

## 成果物
<!-- 作成したファイル、修正した箇所などを記載 -->

## 学んだこと・注意点
<!-- 次回に活かすべき知見を記載 -->

## 次のアクション
<!-- 続行すべきタスクがあれば記載 -->

---
*Generated by ClaudeHelper-Shift-App v1.0*
"""
        return template

    def _create_backup(self, session_path, session_id, is_finalize):
        """チェックポイント/最終保存のバックアップ作成"""
        backup_type = "final" if is_finalize else "checkpoint"
        backup_filename = f"{backup_type}_{session_id}.md"
        backup_path = os.path.join(self.checkpoint_dir, backup_filename)
        
        # ファイルコピー
        with open(session_path, "r", encoding="utf-8") as src:
            with open(backup_path, "w", encoding="utf-8") as dst:
                dst.write(src.read())
        
        print(f"💾 バックアップ作成: {backup_filename}")

    def init_session_tracker(self):
        """セッション追跡初期化"""
        if not os.path.exists(self.session_tracker_file):
            tracker_data = {
                "current_session": None,
                "start_time": None,
                "last_checkpoint": None,
                "auto_checkpoint_interval": 7200  # 2時間 (秒)
            }
            with open(self.session_tracker_file, "w", encoding="utf-8") as f:
                json.dump(tracker_data, f, indent=2, ensure_ascii=False)
    
    def start_session_tracking(self, session_name):
        """セッション追跡開始"""
        tracker_data = self.load_session_tracker()
        tracker_data.update({
            "current_session": session_name,
            "start_time": datetime.now().isoformat(),
            "last_checkpoint": datetime.now().isoformat()
        })
        self.save_session_tracker(tracker_data)
        print(f"⏰ セッション追跡開始: {session_name}")
        print(f"💡 自動チェックポイント間隔: {tracker_data['auto_checkpoint_interval'] // 60}分")
    
    def check_auto_checkpoint_needed(self):
        """自動チェックポイントが必要かチェック"""
        tracker_data = self.load_session_tracker()
        
        if not tracker_data.get("current_session") or not tracker_data.get("last_checkpoint"):
            return False, None
        
        last_checkpoint = datetime.fromisoformat(tracker_data["last_checkpoint"])
        now = datetime.now()
        elapsed = (now - last_checkpoint).total_seconds()
        interval = tracker_data.get("auto_checkpoint_interval", 7200)
        
        if elapsed >= interval:
            return True, tracker_data["current_session"]
        
        return False, None
    
    def perform_auto_checkpoint(self, session_name):
        """自動チェックポイント実行"""
        print(f"🔄 自動チェックポイント実行中: {session_name}")
        
        session_id, _ = self.save_session(
            session_name=f"{session_name}_auto_checkpoint",
            tags="auto-checkpoint,cost-optimization",
            summary=f"2時間経過による自動チェックポイント",
            content="※ コスト最適化のための自動中間保存",
            is_checkpoint=True
        )
        
        # 追跡情報更新
        tracker_data = self.load_session_tracker()
        tracker_data["last_checkpoint"] = datetime.now().isoformat()
        self.save_session_tracker(tracker_data)
        
        print(f"✅ 自動チェックポイント完了 - コンテキストコスト削減効果")
        return session_id
    
    def end_session_tracking(self):
        """セッション追跡終了"""
        tracker_data = self.load_session_tracker()
        if tracker_data.get("current_session"):
            start_time = datetime.fromisoformat(tracker_data["start_time"])
            duration = datetime.now() - start_time
            print(f"⏱️  セッション時間: {duration}")
            
            tracker_data.update({
                "current_session": None,
                "start_time": None,
                "last_checkpoint": None
            })
            self.save_session_tracker(tracker_data)
    
    def load_session_tracker(self):
        """セッション追跡データ読み込み"""
        try:
            with open(self.session_tracker_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.init_session_tracker()
            with open(self.session_tracker_file, "r", encoding="utf-8") as f:
                return json.load(f)
    
    def save_session_tracker(self, data):
        """セッション追跡データ保存"""
        with open(self.session_tracker_file, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

    def auto_generate_summary(self, content):
        """コンテンツから自動要約生成（簡易版）"""
        # 実際のプロジェクトではClaude APIを使用して高品質な要約を生成
        lines = content.split('\n')
        key_lines = [line for line in lines if any(keyword in line.lower() 
                    for keyword in ['作成', '修正', '実装', '追加', '削除', '修正', 'エラー', '完了'])]
        
        if key_lines:
            return " / ".join(key_lines[:3])
        else:
            return "作業内容の詳細記録"

def main():
    parser = argparse.ArgumentParser(description="ClaudeHelper Session Saver for Shift-Care App")
    parser.add_argument("--session-name", help="セッション名")
    parser.add_argument("--tags", help="タグ（カンマ区切り）")
    parser.add_argument("--summary", help="作業要約")
    parser.add_argument("--content", help="詳細内容")
    parser.add_argument("--checkpoint", action="store_true", help="チェックポイント保存")
    parser.add_argument("--finalize", action="store_true", help="最終保存＆バックアップ")
    parser.add_argument("--start-tracking", action="store_true", help="セッション追跡開始")
    parser.add_argument("--check-auto", action="store_true", help="自動チェックポイント確認")
    parser.add_argument("--end-tracking", action="store_true", help="セッション追跡終了")
    
    args = parser.parse_args()
    saver = SessionSaver()
    
    # セッション追跡機能
    if args.start_tracking:
        session_name = args.session_name or f"session_{datetime.now().strftime('%Y%m%d_%H%M')}"
        saver.start_session_tracking(session_name)
        return
    
    if args.check_auto:
        needs_checkpoint, session_name = saver.check_auto_checkpoint_needed()
        if needs_checkpoint:
            saver.perform_auto_checkpoint(session_name)
        else:
            print("⏰ 自動チェックポイントは不要です")
        return
    
    if args.end_tracking:
        saver.end_session_tracking()
        return
    
    # デフォルト値設定
    if args.checkpoint:
        session_name = args.session_name or f"checkpoint_{datetime.now().strftime('%H%M')}"
        summary = args.summary or "中間保存"
        tags = args.tags or "checkpoint"
    elif args.finalize:
        session_name = args.session_name or f"finalize_{datetime.now().strftime('%H%M')}"
        summary = args.summary or "最終保存"
        tags = args.tags or "finalize"
        saver.end_session_tracking()  # 最終保存時にセッション追跡終了
    else:
        session_name = args.session_name or f"session_{datetime.now().strftime('%H%M')}"
        summary = args.summary or "作業記録"
        tags = args.tags or "general"
    
    # セッション保存実行
    saver.save_session(
        session_name=session_name,
        tags=tags,
        summary=summary,
        content=args.content or "",
        is_checkpoint=args.checkpoint,
        is_finalize=args.finalize
    )

if __name__ == "__main__":
    main()